{"version":3,"sources":["components/nameInput/nameInput.tsx","components/playerCard/playerCard.tsx","components/resultInfo/resultInfo.tsx","components/button/button.tsx","assets/images/looserImage.jpg","assets/images/winnerImage.jpg","components/gameOver/gameOver.tsx","data/initialState.ts","data/handChoise.ts","helpers/getDescription.ts","components/game/game.tsx","helpers/smartNumber.ts","helpers/getWinner.ts","helpers/getMessage.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NameInput","value","placeholder","type","onChange","className","e","target","PlayerCard","player","start","name","score","icon","choise","length","faQuestion","size","spin","ResultInfo","result","message","description","Button","clickHandler","onClick","GameOver","playerScore","computerScore","src","looserImage","alt","winnerImage","initialPlayers","id","initialResult","handChoise","faHandRock","faHandPaper","faHandPeace","faHandLizard","faHandSpock","getDescription","winner","looser","getRockDescription","getLizardDescription","getSpockDescription","getScissorsDescription","getPaperDescription","Game","useState","realPlayer","setRealPlayer","computerPlayer","setComputerPlayer","setResult","setStart","gameOver","setGameover","totalWinner","setTotalWinner","inputName","setInputName","useEffect","newRealPlayer","newComputerPlayer","newResult","choiseHandler","identificator","newDescription","index","findIndex","playerChoiseIcon","playerChoiseName","number","Math","floor","random","computerChoiseIcon","computerChoiseName","first","second","getWinner","getMessage","faArrowCircleUp","faPlusCircle","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","library","add","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffcb320e.chunk.js","sourcesContent":["import React from 'react';\nimport './nameInput.scss';\n\ntype NameInputProps = {\n  value: string;\n  placeholder: string;\n  type: string;\n  onChange: (e: string) => void;\n};\n\nconst NameInput = ({ value, placeholder, type, onChange }: NameInputProps) => {\n  return (\n    <input\n      type={type}\n      className=\"nameInput\"\n      value={value}\n      placeholder={placeholder}\n      onChange={(e) => onChange(e.target.value)}\n    />\n  );\n};\n\nexport default NameInput;\n","import React from 'react';\nimport './playerCard.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestion } from '@fortawesome/free-solid-svg-icons';\nimport { PlayerType } from '../../data/types';\n\ntype PlayerCardProps = {\n  player: PlayerType;\n  start: boolean;\n};\n\nconst PlayerCard = ({ player, start }: PlayerCardProps) => {\n\n  const { name, score, } = player;\n  const { icon } = player.choise;\n\n  return (\n    <div className=\"playerCard\">\n      <p className=\"playerCard__text\">\n        {name.length ? name : 'Player'} : {score}\n      </p>\n      <div className=\"playCard__icon-wrapper\">\n        {start ? (\n          <FontAwesomeIcon icon={faQuestion} size=\"4x\" className=\"playCard__icon\" spin />\n        ) : (\n          <FontAwesomeIcon icon={icon} size=\"4x\" className=\"playCard__icon\" />\n        )}\n        \n      </div>\n      <p className=\"playerCard__text\">\n        {!start ? player.choise.name : 'Start'}\n      </p>\n    </div>\n  );\n};\n\nexport default PlayerCard;\n","import React from 'react';\nimport './resultInfo.scss';\nimport { ResultType } from '../../data/types';\n\n\ntype ResultInfoProps = {\n  result: ResultType;\n};\n\nconst ResultInfo = ({ result }: ResultInfoProps) => {\n  return (\n    <div className=\"resultInfo\">\n      <p className={`resultInfo__text ${result.message === 'You win!' ? 'win' : ''} ${result.message === 'You lose!' ? 'lose' : ''}`}>{result.message}</p>\n      <p>{result.description}</p>\n    </div>\n  );\n};\n\nexport default ResultInfo;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport './button.scss';\n\ntype ButtonProps = {\n  icon: IconDefinition;\n  size: string;\n  clickHandler: () => void;\n};\n\nconst Button = ({ icon, clickHandler, size }: ButtonProps) => {\n  return (\n    <button\n      type=\"button\"\n      className={`button ${size === 'small' ? 'small' : ''}`}\n      onClick={clickHandler}\n    >\n      <FontAwesomeIcon icon={icon} size={size === 'small' ? '3x' : '4x'} className=\"button__icon\" />\n    </button>\n  );\n};\n\nexport default Button;\n","export default __webpack_public_path__ + \"static/media/looserImage.8985203d.jpg\";","export default __webpack_public_path__ + \"static/media/winnerImage.0cdad03f.jpg\";","import React from 'react';\nimport looserImage from '../../assets/images/looserImage.jpg';\nimport winnerImage from '../../assets/images/winnerImage.jpg';\nimport './gameOver.scss';\n\ntype GameOverProps = {\n  name: string;\n  playerScore: number;\n  computerScore: number;\n};\n\nconst GameOver = ({ name, playerScore, computerScore }: GameOverProps) => {\n  return (\n    <div className=\"gameOver\">\n      {name === 'Computer' ? (\n        <div>\n          <p className=\"gameOver__text\">Game Over! The winner is {name}!</p>\n          <div className=\"gameOver__image-wrapper\">\n            <img src={looserImage} alt=\"looser_image\" className=\"gameOver__image\" />\n          </div>\n        </div>\n      ) : (\n        <div>\n          <p className=\"gameOver__text\">Congratulations, {name.length ? name : 'Player'}!</p>\n          <div className=\"gameOver__image-wrapper\">\n            <img src={winnerImage} alt=\"winner_image\" className=\"gameOver__image\" />\n          </div>\n        </div>\n      )}\n      <p className=\"gameOver__text\">\n        Your score: {playerScore} | Computer score: {computerScore}\n      </p>\n    </div>\n  );\n};\n\nexport default GameOver;\n","import { faQuestion } from '@fortawesome/free-solid-svg-icons';\nimport { PlayerType, ResultType } from './types';\n\nexport const initialPlayers: PlayerType[] = [\n  {\n    name: '',\n    score: 0,\n    choise: {\n      id: 10,\n      name: '',\n      icon: faQuestion,\n    },\n  },\n  {\n    name: 'Computer',\n    score: 0,\n    choise: {\n      id: 10,\n      name: '',\n      icon: faQuestion,\n    },\n  },\n];\n\nexport const initialResult: ResultType = {\n  message: '',\n  description: 'Just play, Have fun, Enjoy the game!',\n};\n","import {\n  faHandRock,\n  faHandPeace,\n  faHandSpock,\n  faHandPaper,\n  faHandLizard,\n} from '@fortawesome/free-solid-svg-icons';\nimport { HandChoiseType } from './types';\n\n\nexport const handChoise: HandChoiseType[] = [\n  { id: 1, name: 'Rock', icon: faHandRock },\n  { id: 2, name: 'Paper', icon: faHandPaper },\n  { id: 3, name: 'Scissors', icon: faHandPeace },\n  { id: 4, name: 'Lizard', icon: faHandLizard },\n  { id: 5, name: 'Spock', icon: faHandSpock },\n];\n","export const getDescription = (winner: string, looser: string): string => {\n  let message = '';\n  if (winner === 'Rock') {\n    message = getRockDescription(looser);\n  } else if (winner === 'Lizard') {\n    message = getLizardDescription(looser);\n  } else if (winner === 'Spock') {\n    message = getSpockDescription(looser);\n  } else if (winner === 'Scissors') {\n    message = getScissorsDescription(looser);\n  } else {\n    message = getPaperDescription(looser);\n  }\n  return message;\n};\n\nconst getRockDescription = (looser: string): string => {\n  return `Rock crushes ${looser}`;\n};\n\nconst getLizardDescription = (looser: string): string => {\n  return looser === 'Spock' ? 'Lizard poisons Spock' : 'Lizard eats Paper';\n};\n\nconst getSpockDescription = (looser: string): string => {\n  return looser === 'Scissors' ? 'Spock smashes Scissors' : 'Spock vaporizes Rock';\n};\n\nconst getScissorsDescription = (looser: string): string => {\n  return looser === 'Paper' ? 'Scissors cuts Paper' : 'Scissors decapitates Lizard';\n};\n\nconst getPaperDescription = (looser: string): string => {\n  return looser === 'Rock' ? 'Paper covers Rock' : 'Paper disproves Spock';\n};\n","import React, { useState, useEffect } from 'react';\nimport { faArrowCircleUp, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport NameInput from '../nameInput/nameInput';\nimport PlayerCard from '../playerCard/playerCard';\nimport ResultInfo from '../resultInfo/resultInfo';\nimport Button from '../button/button';\nimport GameOver from '../gameOver/gameOver';\nimport { initialPlayers, initialResult } from '../../data/initialState';\nimport { handChoise } from '../../data/handChoise';\nimport { smartNumber } from '../../helpers/smartNumber';\nimport { getWinner } from '../../helpers/getWinner';\nimport { getMessage } from '../../helpers/getMessage';\nimport { getDescription } from '../../helpers/getDescription';\nimport './game.scss';\n\nconst Game = () => {\n  const [realPlayer, setRealPlayer] = useState(initialPlayers[0]);\n  const [computerPlayer, setComputerPlayer] = useState(initialPlayers[1]);\n  const [result, setResult] = useState(initialResult);\n  const [start, setStart] = useState(true);\n  const [gameOver, setGameover] = useState(false);\n  const [totalWinner, setTotalWinner] = useState('');\n  const [inputName, setInputName] = useState('');\n\n  const maxScore = 10;\n\n  useEffect(() => {\n    if (realPlayer.score >= maxScore || computerPlayer.score >= maxScore) {\n      realPlayer.score > computerPlayer.score\n        ? setTotalWinner(realPlayer.name)\n        : setTotalWinner(computerPlayer.name);\n      setGameover(true);\n    }\n  }, [realPlayer, computerPlayer]);\n\n  const newRealPlayer = { ...realPlayer };\n  const newComputerPlayer = { ...computerPlayer };\n  const newResult = { ...result };\n\n  const nameChangeHandler = (name: string) => {\n    setInputName(name);\n  };\n\n  const playerNameHandler = () => {\n    if (inputName) {\n      newRealPlayer.name = inputName;\n      setRealPlayer(newRealPlayer);\n      setInputName('');\n    }\n  };\n\n  const choiseHandler = (identificator: number) => {\n    const index = handChoise.findIndex(({ id }) => id === identificator);\n    const playerChoiseIcon = handChoise[index].icon;\n    const playerChoiseName = handChoise[index].name;\n\n    const number = smartNumber();\n    const computerChoiseIcon = handChoise[number].icon;\n    const computerChoiseName = handChoise[number].name;\n\n    const winner = getWinner(playerChoiseName, computerChoiseName);\n\n    let newDescription;\n\n    if (winner === 'tie') {\n      newDescription = `${playerChoiseName} = ${computerChoiseName}`;\n    } else if (winner === 'firstPlayer') {\n      newRealPlayer.score += 1;\n      newDescription = getDescription(playerChoiseName, computerChoiseName);\n    } else {\n      newComputerPlayer.score += 1;\n      newDescription = getDescription(computerChoiseName, playerChoiseName);\n    }\n\n    newResult.message = getMessage(winner);\n    newResult.description = newDescription;\n\n    newRealPlayer.choise.icon = playerChoiseIcon;\n    newRealPlayer.choise.name = playerChoiseName;\n\n    newComputerPlayer.choise.icon = computerChoiseIcon;\n    newComputerPlayer.choise.name = computerChoiseName;\n\n    setRealPlayer(newRealPlayer);\n    setComputerPlayer(newComputerPlayer);\n    setResult(newResult);\n    setStart(false);\n  };\n\n  const restartClickHandler = () => {\n    setRealPlayer(initialPlayers[0]);\n    setComputerPlayer(initialPlayers[1]);\n    setResult(initialResult);\n    setTotalWinner('');\n    setStart(true);\n    setGameover(false);\n  };\n\n  if (gameOver) {\n    return (\n      <div className=\"container container-fluid\">\n        <div className=\"row center-xs\">\n          <div className=\"col-xs-12\">\n            <GameOver\n              name={totalWinner}\n              playerScore={realPlayer.score}\n              computerScore={computerPlayer.score}\n            />\n          </div>\n        </div>\n        <div className=\"row center-xs\">\n          <div className=\"col-xs-12\">\n            <p className=\"game__text\">Press buttton for restart!</p>\n            <Button icon={faArrowCircleUp} clickHandler={restartClickHandler} size=\"normal\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"container container-fluid\">\n        <div className=\"row center-xs\">\n          <div className=\"col-xs-12\">\n            <h1 className=\"game__heading\">Rock | Paper | Scissors | Lizard | Spock</h1>\n          </div>\n        </div>\n        <div className=\"row center-xs\">\n          <div className=\"col-xs-12 col-md-6\">\n            <div className=\"input-wrapper\">\n              <NameInput\n                type=\"text\"\n                value={inputName}\n                placeholder=\"Enter your name\"\n                onChange={nameChangeHandler}\n              />\n              <Button icon={faPlusCircle} clickHandler={playerNameHandler} size=\"small\" />\n            </div>\n          </div>\n        </div>\n        <div className=\"row middle-xs\">\n          <div className=\"col-xs-6 col-md-4 first-md\">\n            <PlayerCard player={realPlayer} start={start} />\n          </div>\n          <div className=\"col-xs-12 col-md-4 last-xs\">\n            <ResultInfo result={result} />\n          </div>\n          <div className=\"col-xs-6 col-md-4 last-md\">\n            <PlayerCard player={computerPlayer} start={start} />\n          </div>\n        </div>\n        <div className=\"row center-xs\">\n          <div className=\"col-xs-12\">\n            <p className=\"game__text\">Choose your weapon</p>\n          </div>\n        </div>\n        <div className=\"row center-xs\">\n          <div className=\"col-xs-12\">\n            {handChoise.map(({ id, icon }) => {\n              return (\n                <Button key={id} clickHandler={() => choiseHandler(id)} icon={icon} size=\"normal\" />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","export const smartNumber = () => {\n  return Math.floor(Math.random() * 5);\n};\n","export const getWinner = (first: string, second: string): string => {\n  let result = '';\n\n  if (first === second) {\n    result = 'tie';\n  } else if (first === 'Rock') {\n    if (second === 'Lizard' || second === 'Scissors') {\n      result = 'firstPlayer';\n    } else {\n      result = 'secondPlayer';\n    }\n  } else if (first === 'Lizard') {\n    if (second === 'Spock' || second === 'Paper') {\n      result = 'firstPlayer';\n    } else {\n      result = 'secondPlayer';\n    }\n  } else if (first === 'Spock') {\n    if (second === 'Scissors' || second === 'Rock') {\n      result = 'firstPlayer';\n    } else {\n      result = 'secondPlayer';\n    }\n  } else if (first === 'Scissors') {\n    if (second === 'Paper' || second === 'Lizard') {\n      result = 'firstPlayer';\n    } else {\n      result = 'secondPlayer';\n    }\n  } else if (first === 'Paper') {\n    if (second === 'Spock' || second === 'Rock') {\n      result = 'firstPlayer';\n    } else {\n      result = 'secondPlayer';\n    }\n  }\n  return result;\n};\n","export const getMessage = (player: string): string => {\n  let message = '';\n  switch (player) {\n    case 'firstPlayer':\n      message = 'You win!';\n      break;\n\n    case 'secondPlayer':\n      message = 'You lose!';\n      break;\n\n    case 'tie':\n      message = 'Its a tie!';\n  }\n  return message;\n};\n","import React from 'react';\nimport './App.scss';\nimport Board from './components/game/game';\n\nconst App = () => {\n  return (\n    <div>\n      <Board />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faQuestion,\n  faHandRock,\n  faHandPeace,\n  faHandSpock,\n  faHandPaper,\n  faHandLizard\n} from '@fortawesome/free-solid-svg-icons';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'flexboxgrid';\n\nlibrary.add(\n  faQuestion,\n  faHandRock,\n  faHandPeace,\n  faHandSpock,\n  faHandPaper,\n  faHandLizard);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}